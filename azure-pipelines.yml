# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
 - name: RLSECURE_DIR
   value: ./RLSecure
 - name: PACKAGE_URL
   value: Apache/struts2-showcase@2.5.28
 - name: ARTIFACT2SCAN
   value: ./target/struts2-showcase.war
 - name: REPORT_PATH
   value: RLSecure

steps:
- task: Maven@3
  displayName: 'Build'

  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx2048m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.11'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'

- task: UsePythonVersion@0
  displayName: 'Python Setup'
  inputs:
    versionSpec: '3.x'
    addToPath: true
    architecture: 'x64'

- bash: |
    # prepare
    python -m pip install --upgrade pip
    #
    # install rl-deploy and install rl-secure
    pip install rl-deploy
    rl-deploy --version
    #
    # install rl-secure
    rl-deploy install $(RLSECURE_DIR) \
      --encoded-key=$(RLSECURE_ENCODED_LICENSE) \
      --site-key=$(RLSECURE_SITE_KEY) \
      --no-tracking
    $(RLSECURE_DIR)/rl-secure init \
      -s $(RLSECURE_DIR)
    ${RLSECURE_DIR}/rl-secure \
      --version
    #
    # run a scan on a artifact, report and report status
    mkdir -p ./$(REPORT_PATH)
    $(RLSECURE_DIR)/rl-secure scan $(ARTIFACT2SCAN) \
      -s $(RLSECURE_DIR) \
      -p $(PACKAGE_URL)
      --keep-reference \
      --no-tracking
    $(RLSECURE_DIR)/rl-secure report \
      -s $(RLSECURE_DIR) \
      -p $(PACKAGE_URL) \
      --format all \
      --output-path ./$(REPORT_PATH)
    # report status and exit code
    $(RLSECURE_DIR)/rl-secure status \
      -s $(RLSECURE_DIR) \
      -p $(PACKAGE_URL) \
      --return-status
  displayName: 'RL Scan'

- task: PublishPipelineArtifact@1
  condition: succeededOrFailed()
  displayName: 'Publish CycloneDX'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/$(REPORT_PATH)/report.cyclonedx.json
    artifactName: CycloneDX-SBOM

- task: PublishPipelineArtifact@1
  condition: succeededOrFailed()
  displayName: 'Publish SPDX'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/$(REPORT_PATH)/report.spdx.json
    artifactName: SPDX-SBOM

- task: PublishPipelineArtifact@1
  condition: succeededOrFailed()
  displayName: 'Publish RL-json'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/$(REPORT_PATH)/report.rl.json
    artifactName: ReversingLabs-JSONreport

- task: PublishPipelineArtifact@1
  condition: succeededOrFailed()
  displayName: 'Publish RL HTML report'
  inputs:
    targetPath: $(System.DefaultWorkingDirectory)/$(REPORT_PATH)/rl-html
    artifactName: ReversingLabs-HTMLreport
